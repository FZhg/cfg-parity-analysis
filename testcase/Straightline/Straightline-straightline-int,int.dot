digraph {
    2 -> 3 [label="EACH_TO_EACH"];
    3 -> 4 [label="EACH_TO_EACH"];
    4 -> 5 [label="EACH_TO_EACH"];
    4 -> 1 [label="ArithmeticException"];
    5 -> 6 [label="EACH_TO_EACH"];
    6 -> 7 [label="EACH_TO_EACH"];
    6 -> 1 [label="ArithmeticException"];
    7 -> 0 [label="EACH_TO_EACH"];

    2 [shape=oval label="Process order: 1\lTransferInput#0\lBefore:   parity = {a=T, b=T}\l~~~~~~~~~\l<entry>"];
    3 [shape=rectangle label="Process order: 2\lTransferInput#1\lBefore:   parity = {a=T, b=T}\l~~~~~~~~~\lc   [ VariableDeclaration ]\ld   [ VariableDeclaration ]\l4   [ IntegerLiteral ]    > even\ld = 4   [ Assignment ]    > even\le   [ VariableDeclaration ]\l5789   [ IntegerLiteral ]    > odd\le = 5789   [ Assignment ]    > odd\lf   [ VariableDeclaration ]\la   [ LocalVariable ]    > T\ld   [ LocalVariable ]    > even\l(a + d)   [ NumericalAddition ]    > T\lf = (a + d)   [ Assignment ]    > T\lg   [ VariableDeclaration ]\le   [ LocalVariable ]    > odd\l33247   [ IntegerLiteral ]    > odd\l(e - 33247)   [ NumericalSubtraction ]    > T\lg = (e - 33247)   [ Assignment ]    > T\lh   [ VariableDeclaration ]\l2   [ IntegerLiteral ]    > even\lb   [ LocalVariable ]    > T\l(2 * b)   [ NumericalMultiplication ]    > even\lh = (2 * b)   [ Assignment ]    > even\li   [ VariableDeclaration ]\l3   [ IntegerLiteral ]    > odd\le   [ LocalVariable ]    > odd\l(3 * e)   [ NumericalMultiplication ]    > odd\li = (3 * e)   [ Assignment ]    > odd\lj   [ VariableDeclaration ]\le   [ LocalVariable ]    > odd\l3   [ IntegerLiteral ]    > odd\l~~~~~~~~~\lAnalysisResult#1\lAfter:   parity = {a=T, b=T, d=even, e=odd, f=T, g=T, h=even, i=odd}\l"];
    4 [shape=rectangle label="Process order: 3\lTransferInput#33\lBefore:   parity = {a=T, b=T, d=even, e=odd, f=T, g=T, h=even, i=odd}\l~~~~~~~~~\l(e / 3)   [ IntegerDivision ]"];
    5 [shape=rectangle label="Process order: 4\lTransferInput#36\lBefore:   parity = {a=T, b=T, d=even, e=odd, f=T, g=T, h=even, i=odd}\l~~~~~~~~~\l(e / 3)   [ IntegerDivision ]\lj = (e / 3)   [ Assignment ]\lk   [ VariableDeclaration ]\ld   [ LocalVariable ]\l2   [ IntegerLiteral ]\l~~~~~~~~~\lAnalysisResult#3\lAfter:   parity = {a=T, b=T, d=even, e=odd, f=T, g=T, h=even, i=odd, j=T}\l"];
    1 [shape=oval label="Process order: 8\lTransferInput#50\lBefore:   parity = {a=T, b=T, d=even, e=odd, f=T, g=T, h=even, i=odd, j=T}\l~~~~~~~~~\l<exceptional-exit>"];
    6 [shape=rectangle label="Process order: 5\lTransferInput#45\lBefore:   parity = {a=T, b=T, d=even, e=odd, f=T, g=T, h=even, i=odd, j=T}\l~~~~~~~~~\l(d % 2)   [ IntegerRemainder ]"];
    7 [shape=rectangle label="Process order: 6\lTransferInput#48\lBefore:   parity = {a=T, b=T, d=even, e=odd, f=T, g=T, h=even, i=odd, j=T}\l~~~~~~~~~\l(d % 2)   [ IntegerRemainder ]\lk = (d % 2)   [ Assignment ]\ll   [ VariableDeclaration ]\l\"string\"   [ StringLiteral ]\ll = \"string\"   [ Assignment ]\lk   [ LocalVariable ]\lreturn k   [ Return ]\l~~~~~~~~~\lAnalysisResult#5\lAfter:   parity = {a=T, b=T, d=even, e=odd, f=T, g=T, h=even, i=odd, j=T, k=T, l=-}\l"];
    0 [shape=oval label="Process order: 7\lTransferInput#59\lBefore:   parity = {a=T, b=T, d=even, e=odd, f=T, g=T, h=even, i=odd, j=T, k=T, l=-}\l~~~~~~~~~\l<exit>"];
}